diff -rupN rtmpdump/Makefile rtmpdump-subscribe/Makefile
--- rtmpdump/Makefile	2009-04-27 05:13:18.000000000 -0700
+++ rtmpdump-subscribe/Makefile	2009-04-30 06:50:35.000000000 -0700
@@ -8,14 +8,17 @@ LDFLAGS=-Wall
 
 all: rtmpdump
 
+install:
+	cp rtmpdump /usr/bin/rtmpdump
+
 clean:
 	rm -f *.o
 
 streams: bytes.o log.o rtmp.o AMFObject.o rtmppacket.o streams.o parseurl.o dh.o handshake.o
-	$(CXX) $(LDFLAGS) $^ -o $@_x86 -lpthread -lssl -lcrypto
+	$(CXX) $(LDFLAGS) $^ -o $@ -lpthread -lssl -lcrypto
 
 rtmpdump: bytes.o log.o rtmp.o AMFObject.o rtmppacket.o rtmpdump.o parseurl.o dh.o handshake.o
-	$(CXX) $(LDFLAGS) $^ -o $@_x86 -lssl -lcrypto
+	$(CXX) $(LDFLAGS) $^ -o $@ -lssl -lcrypto
 
 bytes.o: bytes.cpp bytes.h Makefile
 log.o: log.cpp log.h Makefile
diff -rupN rtmpdump/rtmp.cpp rtmpdump-subscribe/rtmp.cpp
--- rtmpdump/rtmp.cpp	2009-04-26 13:27:13.000000000 -0700
+++ rtmpdump-subscribe/rtmp.cpp	2009-04-29 13:35:02.000000000 -0700
@@ -100,6 +100,17 @@ CRTMP::~CRTMP()
 
 double CRTMP::GetDuration() { return m_fDuration; }
 bool CRTMP::IsConnected() { return m_socket != 0; }
+bool CRTMP::GetSubscribe() { return bSubscribe; }
+
+void CRTMP::SetSubscribe(bool subscribe) {
+  bSubscribe = subscribe;
+}
+
+char * CRTMP::GetSubscribePath() { return subscribepath; }
+
+void CRTMP::SetSubscribePath(char * path) {
+  subscribepath = path;
+}
 
 void CRTMP::SetBufferMS(int size)
 {
@@ -589,8 +600,9 @@ bool CRTMP::SendBGHasStream(double dId, 
   return SendRTMP(packet);
 }
 
-bool CRTMP::SendCreateStream(double dStreamId)
+bool CRTMP::SendFCSubscribe(char *subscribepath)
 {
+  Log(LOGDEBUG, "FCSubscribe: %s", subscribepath);
   RTMPPacket packet;
   packet.m_nChannel = 0x03;   // control channel (invoke)
   packet.m_headerType = RTMP_PACKET_SIZE_MEDIUM;
@@ -598,6 +610,27 @@ bool CRTMP::SendCreateStream(double dStr
 
   packet.AllocPacket(256); // should be enough
   char *enc = packet.m_body;
+  enc += EncodeString(enc, "FCSubscribe");
+  enc += EncodeNumber(enc, 0);
+  *enc = 0x05; // NULL
+  enc++;
+  enc += EncodeString(enc, subscribepath);
+
+  packet.m_nBodySize = enc - packet.m_body;
+
+  return SendRTMP(packet);
+}
+
+
+bool CRTMP::SendCreateStream(double dStreamId)
+{
+  RTMPPacket packet;
+  packet.m_nChannel = 0x03;   // control channel (invoke)
+  packet.m_headerType = RTMP_PACKET_SIZE_MEDIUM;
+  packet.m_packetType = 0x14; // INVOKE
+
+  packet.AllocPacket(1024); // should be enough
+  char *enc = packet.m_body;
   enc += EncodeString(enc, "createStream");
   enc += EncodeNumber(enc, dStreamId);
   *enc = 0x05; // NULL
@@ -729,7 +762,7 @@ bool CRTMP::SendPlay()
   packet.m_packetType = 0x14; // INVOKE
   packet.m_nInfoField2 = m_stream_id; //0x01000000;
 
-  packet.AllocPacket(256); // should be enough
+  packet.AllocPacket(1024); // should be enough
   char *enc = packet.m_body;
   enc += EncodeString(enc, "play");
   enc += EncodeNumber(enc, 0.0); // stream id??
@@ -848,6 +881,10 @@ void CRTMP::HandleInvoke(const char *bod
       SendPing(3, 0, 300);
 
       SendCreateStream(2.0);
+
+      if (GetSubscribe()) {
+        SendFCSubscribe(GetSubscribePath());
+      }
     }
     else if (methodInvoked == "createStream")
     {
@@ -874,6 +911,10 @@ void CRTMP::HandleInvoke(const char *bod
   {
     SendCheckBWResult();
   }
+  else if (method == "onFCSubscribe")
+  {
+    // onFCSubscribe
+  }
   else if (method == "_error")
   {
     Log(LOGERROR, "rtmp server sent error");
Binary files rtmpdump/rtmpdump and rtmpdump-subscribe/rtmpdump differ
diff -rupN rtmpdump/rtmpdump.cpp rtmpdump-subscribe/rtmpdump.cpp
--- rtmpdump/rtmpdump.cpp	2009-04-26 03:52:47.000000000 -0700
+++ rtmpdump-subscribe/rtmpdump.cpp	2009-04-29 00:15:56.000000000 -0700
@@ -431,6 +431,7 @@ int main(int argc, char **argv)
 	bool bResume = false;    // true in resume mode
 	//bool bNoHeader = false;  // in resume mode this will tell not to write an FLV header again
 	bool bAudioOnly = false; // when resuming this will tell whether its an audio only stream
+	bool bSubscribe = false; // for CDN FCSubscribe method after connect
 	uint32_t dSeek = 0;	 // seek position in resume mode, 0 otherwise
 	uint32_t bufferTime = 10*60*60*1000; // 10 hours as default
 
@@ -446,6 +447,7 @@ int main(int argc, char **argv)
 
 	char *hostname = 0;
 	char *playpath = 0;
+	char *subscribepath = 0;
 	int port = -1;
 	int protocol = RTMP_PROTOCOL_UNDEFINED;
 	bool bLiveStream = false; // is it a live stream? then we can't seek/resume
@@ -491,12 +493,13 @@ int main(int argc, char **argv)
 		{"timeout", 1, NULL, 'm'},
 		{"buffer",  1, NULL, 'b'},
 		{"skip",    1, NULL, 'k'},
+                {"subscribe", 1, NULL, 'd'},
 		{0,0,0,0}
 	};
 
 	signal(SIGINT, sigIntHandler);
 
-	while((opt = getopt_long(argc, argv, "hver:s:t:p:a:f:o:u:n:c:l:y:m:k:w:x:", longopts, NULL)) != -1) {
+	while((opt = getopt_long(argc, argv, "hver:s:t:p:a:f:o:u:n:c:l:y:m:k:d:w:x:", longopts, NULL)) != -1) {
 		switch(opt) {
 			case 'h':
 				LogPrintf("\nThis program dumps the media content streamed over rtmp.\n\n");
@@ -520,8 +523,9 @@ int main(int argc, char **argv)
 				LogPrintf("--timeout|-m num        Timeout connection num seconds (default: %lu)\n", timeout);
 				LogPrintf("--buffer|-b             Buffer time in milliseconds (default: %lu), this option makes only sense in stdout mode (-o -)\n", 
 					bufferTime);
-				LogPrintf("--skip|-k num           Skip num keyframes when looking for last keyframe to resume from. Useful if resume fails (default: %d)\n\n",
+				LogPrintf("--skip|-k num           Skip num keyframes when looking for last keyframe to resume from. Useful if resume fails (default: %d)\n",
 					nSkipKeyFrames);
+				LogPrintf("--subscribe|-d string	Stream name to subscribe to\n\n");
 				LogPrintf("If you don't pass parameters for swfUrl, pageUrl, app or auth these propertiews will not be included in the connect ");
 				LogPrintf("packet.\n\n");
 				return RD_SUCCESS;
@@ -645,6 +649,10 @@ int main(int argc, char **argv)
 			case 'm':
 				timeout = atoi(optarg);
 				break;
+			case 'd':
+				subscribepath = optarg;
+				bSubscribe = true;
+				break;
 			default:
 				LogPrintf("unknown option: %c\n", opt);
 				break;
@@ -721,6 +729,9 @@ int main(int argc, char **argv)
 	Log(LOGDEBUG, "Setting buffer time to: %dms", bufferTime);
 	rtmp->SetBufferMS(bufferTime);
 
+	rtmp->SetSubscribe(bSubscribe);
+	rtmp->SetSubscribePath(subscribepath);
+
 	unsigned long size = 0;
         uint32_t timestamp = 0;
 
diff -rupN rtmpdump/rtmp.h rtmpdump-subscribe/rtmp.h
--- rtmpdump/rtmp.h	2009-04-26 03:46:17.000000000 -0700
+++ rtmpdump-subscribe/rtmp.h	2009-04-29 00:15:56.000000000 -0700
@@ -149,6 +149,11 @@ class CRTMP
       static double ReadNumber(const char *data);
 
       static bool FindFirstMatchingProperty(AMFObject &obj, std::string name, AMFObjectProperty &p);
+      
+      bool GetSubscribe();
+      void SetSubscribe(bool subscribe);
+      char * GetSubscribePath();
+      void SetSubscribePath(char *path);
 
     protected:
       bool HandShake(bool FP9HandShake=true);
@@ -161,6 +166,7 @@ class CRTMP
       bool SendPing(short nType, unsigned int nObject, unsigned int nTime = 0);
       bool SendBGHasStream(double dId, char *playpath);
       bool SendCreateStream(double dStreamId);
+      bool SendFCSubscribe(char *playpath);
       bool SendPlay();
       bool SendPause();
       bool SendSeek(double dTime);
@@ -194,6 +200,9 @@ class CRTMP
       int  m_nBufferMS;
       int  m_stream_id; // returned in _result from invoking createStream
 
+      bool bSubscribe;
+      char *subscribepath;
+
       //std::string m_strPlayer;
       //std::string m_strPageUrl;
       //std::string m_strLink;
